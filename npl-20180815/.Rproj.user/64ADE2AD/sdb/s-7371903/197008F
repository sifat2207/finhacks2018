{
    "collab_server" : "",
    "contents" : "vif <- function(xx, y.name, na.action=na.exclude, ...) {\n  nnames <- names(xx)\n  nn.x <- seq(along=nnames)\n  if (missing(y.name))\n    y.number <- 0\n  else {\n    y.number <- match(y.name, nnames, 0)\n    nn.x <-  nn.x[-y.number]\n  }\n  r2 <- nn.x\n  names(r2) <- nnames[nn.x]\n  if (length(r2) < 2) stop(\"vif requires two or more X-variables.\")\n  for (i in nn.x) {\n    tmp.lm <- lm(xx[,i] ~\n                   data.matrix(xx[,-c(y.number, i)]),\n                 na.action=na.action)\n    r2[nnames[i]] <- summary(tmp.lm)$r.squared\n  }\n  1/(1-r2)\n}\n\n#Ambil variabel yg signifikan dari model Fungsi mengambil varibel sinifikan:\n  nama_var_factor=function(x) {\n    namas=colnames(x)\n    temp=NULL\n    for (nama in namas)\n    {\n      if(is.factor(x[,nama])) {\n        y1=nama\n        y2=paste0(nama,unique(x[,nama]))\n      } else {\n        y1=y2=nama\n      }\n      temp=rbind(temp,data.frame(nama=y1,var=y2,stringsAsFactors = F))\n    }\n    return(temp)\n  }\n\n#semua loan\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(caret)\nlibrary(earth)\nlibrary(pROC)\nlibrary(arm)\ndb_postgress <- src_postgres(\n  host=\"192.168.3.6\",\n  dbname=\"amartha\",\n  user = \"data_science\",\n  password= \"Amartha20170426!\",\n  port = 5432\n)\n\nsuppressWarnings({\n  \n  loan_raw = tbl(db_postgress,'loan_raw') %>%\n    filter(is.na(deletedAt))\n  \n  survey = tbl(db_postgress,'survey') %>%\n    filter(is.na(deletedAt))\n  \n  \n  loan = tbl(db_postgress,'loan') %>%\n    filter(is.na(deletedAt))\n  \n  disbursement = tbl(db_postgress,'disbursement') %>%\n    filter(is.na(deletedAt))\n  r_loan_disbursement = tbl(db_postgress,'r_loan_disbursement') %>%\n    filter(is.na(deletedAt))\n  \n  installment = tbl(db_postgress,'installment') %>%\n    filter(is.na(deletedAt))\n  r_loan_installment = tbl(db_postgress,'r_loan_installment') %>%\n    filter(is.na(deletedAt))\n  \n  borrower = tbl(db_postgress,'borrower') %>%\n    filter(is.na(deletedAt))\n  r_loan_borrower = tbl(db_postgress,'r_loan_borrower') %>%\n    filter(is.na(deletedAt))\n  \n  r_loan_branch = tbl(db_postgress,'r_loan_branch') %>%\n    filter(is.na(deletedAt))\n  \n  r_loan_sector = tbl(db_postgress,'r_loan_sector') %>%\n    filter(is.na(deletedAt))\n  \n})\n\n\ntbl_transaction=installment %>%\n  filter(stage %in% c('SUCCESS','IN-REVIEW','APPROVE','PROCESSING','PENDING')) %>%\n  rename(installmentId=id) %>%\n  mutate(tr_date=date(if_else(is.na(transactionDate),createdAt,transactionDate))) %>%\n  inner_join(r_loan_installment,\n             by=\"installmentId\") %>%\n  distinct(loanId,tr_date,type,presence,frequency) %>%\n  inner_join((loan %>%\n               filter(stage %in% c('END-EARLY', 'INSTALLMENT','END EARLY','END', 'END-PENDING'),\n                      plafond>0) %>%\n               rename(loanId=id) %>%\n               inner_join(r_loan_borrower %>%\n                             rename(client_id=borrowerId),\n                           by=\"loanId\") %>%\n               select(loanId,client_id,tenor)%>%\n               inner_join(r_loan_disbursement %>%\n                            inner_join(disbursement %>%\n                                         rename(disbursementId=id),\n                                       by=\"disbursementId\") %>%\n                            mutate(data_date_accept=date(disbursementDate)) %>%\n                            select(loanId,data_date_accept),\n                          by=\"loanId\")), by =\"loanId\")%>%\n  filter(tr_date>data_date_accept) %>%\n  collapse()\n\nhistory_performance=tbl_transaction %>%\n  group_by(loanId) %>%\n  arrange(tr_date) %>%\n  mutate(tr_par=cumsum(if_else(type=='PAR',1,0)),\n         tr_tanggungrenteng=cumsum(if_else(type %in% c('TR1','TR2'),1,0)),\n         tr_absensi=cumsum(if_else(presence=='ALFA',0,if_else(presence=='HADIR',1,0.5))),\n         tr_rn=row_number(),\n         tr_total_freq=cumsum(frequency),\n         tr_end=max(if_else(type %in% c('END','END-EARLY','END EARLY'),1,0))\n  ) %>%\n  mutate(data_per_tr=tr_tanggungrenteng/tr_rn,\n         data_per_par=tr_par/tr_rn,\n         data_per_freq_week=tr_total_freq/tr_rn,\n         data_per_absensi=tr_absensi/tr_rn) %>%\n  mutate(flag_default=ifelse((tr_par+tr_tanggungrenteng)>2,1,\n                             ifelse((tr_par+tr_tanggungrenteng)==0,0,0.5))) %>%\n  mutate(performance=0.5*(1-data_per_par)+0.3*(1-data_per_tr)+0.2*data_per_absensi)\n\ndf_dependent=history_performance %>%\n  group_by(loanId) %>%\n  mutate(last_date=max(tr_date)) %>%\n  filter(tr_date==last_date) %>%\n  ungroup() %>%\n  mutate(NormMin_Performance=(performance-min(performance))/(max(performance)-min(performance))) %>%\n  #transaksi yang digunakan adalah semua transaksi yang sudah berjalan 90 hari atau lebih (>12 minggu)\n  #filter(tr_rn>12)%>%  \n  select(data_id=loanId,client_id,NormMin_Performance,performance,flag_default,tr_par,\n         tr_tanggungrenteng, tr_absensi,tr_rn,tr_total_freq, tr_end)  %>%\n  collect(n=Inf)\n\n#buat variabel previous performance dan flag default\ndata_client_id=(df_dependent%>%\n                  group_by(client_id)%>%\n                  summarise(n=n())%>%\n                  filter (n>1))$client_id\n\nloan_morethan_one=df_dependent %>% \n  filter(client_id %in% data_client_id)%>%\n  select(data_id,client_id,performance, flag_default)\ndf_loan_prev=NULL\n\nfor (client in data_client_id){\n  df_loan_morethan_one=loan_morethan_one%>%\n    filter(client_id==client)%>%\n    arrange(data_id)\n  df_loan_morethan_one$prev_performance=append(0,df_loan_morethan_one$performance[1:(nrow(df_loan_morethan_one)-1)])\n  df_loan_morethan_one$prev_flag_default=append(2,df_loan_morethan_one$flag_default[1:(nrow(df_loan_morethan_one)-1)])\n  df_loan_morethan_one=df_loan_morethan_one%>%\n    select(-c(client_id,performance,flag_default))\n  df_loan_prev=rbind(df_loan_prev,df_loan_morethan_one)\n}\n\n#prev_flag_default=2 ; tidak ada history performance sebelumnya\ndf_dependent=df_dependent%>%\n  left_join(df_loan_prev, by=\"data_id\")%>%\n  mutate(prev_performance=ifelse(is.na(prev_performance),0,prev_performance),\n         prev_flag_default=ifelse(is.na(prev_flag_default),2,prev_flag_default))\n\n\ndf_loan <- loan %>%\n  filter(stage %in% c('END-EARLY', 'INSTALLMENT','END EARLY','END', 'END-PENDING'),\n         plafond>0) %>%\n  select(data_id=id,\n         data_plafond=plafond,\n         data_totalangsuran=installment,\n         data_jangkawaktu=tenor,\n         data_ke=loanPeriod) %>%\n  inner_join(r_loan_branch %>%\n               select(data_id=loanId,\n                      client_branch=branchId),\n             by=c(\"data_id\")) %>%\n  inner_join(r_loan_sector %>%\n               select(data_id=loanId,\n                      data_sector=sectorId),\n             by=c(\"data_id\")) %>%\n  collect()\n\ndf_loan_raw <- loan_raw %>%\n  mutate(uuid=sql(\"json_extract_path_text(_raw::json,'uuid')\")) %>% \n  rename(loan_raw_raw=`_raw`) %>%\n  left_join(survey %>%\n              mutate(uuid=sql(\"json_extract_path_text(_raw::json,'uuid')\")) %>%\n              select(uuid,survey_raw=`_raw`),\n            by=\"uuid\") %>%\n  mutate(`_raw`=ifelse(is.na(survey_raw),loan_raw_raw,survey_raw)) %>%\n  select(data_id=loanId,`_raw`) %>%\n  collect()\n\n\nlibrary(jsonlite)\n\njson_text <- df_loan_raw[[\"_raw\"]]\n\nwrite(json_text,file(tmp <- tempfile()))\n\ndf_raw <- stream_in(file(tmp))\n\nvar_all=read.csv(\"input/cstrip_jenis_coloumn.csv\",as.is = T)\n\nvar_numeric=var_all[var_all$jenis==\"numeric\",]$nama_var\n\nvar_factor=var_all[var_all$jenis==\"factor\",]$nama_var\nf_factor=function(x) as.factor(gsub(\" \",\"\",x))\n\nfilter_factor1 <- paste0(var_factor,\">''\",collapse = \" & \")\nfilter_factor2 <- paste0(var_factor,\"!='null'\",collapse = \" & \")\n\n\ndf_data <- df_raw %>%\n  select(one_of(var_all$nama_var),client_martialstatus,\n         data_suami_marital_status,data_suami_martial_status) %>%\n  mutate(client_maritalstatus = ifelse(is.na(client_maritalstatus),\n                                       client_martialstatus,\n                                       client_maritalstatus),\n         data_suami_marital_status = ifelse(is.na(data_suami_marital_status),\n                                            data_suami_martial_status,\n                                            data_suami_marital_status)) %>%\n  select(-contains('martial'))\n\nsource('fungsi_tanggungan.R')\n\n\ndf_new <- f_tanggungan(df_raw,df_data$client_maritalstatus)\ndf_pendapatan=df_raw%>%\n  select(branch,groupId,data_pendapatan_istri,data_pendapatan_suami,data_pendapatan_lain)\ndf_pembiayaan <- df_loan_raw %>%\n  select(-`_raw`) %>%\n  cbind(df_data) %>%\n  cbind(df_new) %>%\n  cbind(df_pendapatan)%>%\n  mutate(data_akad=ifelse(data_akad %in% c('mba','MBA','murabahah','Murabahah'),\n                          'MBA',\n                          ifelse(data_akad %in% c('AHA','aha','Alhiwalah'),\n                                 'AHA',\n                                 ifelse(data_akad %in% c('IJR','ijr'),\n                                        'IJR','')))) %>%\n  mutate(data_rmc_jenislantai=ifelse( data_rmc_jenislantai %in% c(\"Kramik 25%\"),\"B\",data_rmc_jenislantai)) %>%\n  filter_(filter_factor1,filter_factor2) %>%\n  mutate_at(vars(one_of(var_factor)),funs(f_factor)) %>%\n  mutate_at(vars(one_of(var_numeric)),funs(as.numeric)) %>%\n  filter(!is.na(data_client_umur),!is.na(data_suami_umur))%>%\n  filter(data_id!=0)\n\n\nn_data=nrow(df_loan)\nv_rate=rep(0,n_data)\nfor (i in 1:n_data) {\n  A=as.numeric(df_loan$data_totalangsuran[i])\n  P=df_loan$data_plafond[i]\n  n=df_loan$data_jangkawaktu[i]\n  fun=function(r) ((1+r)^n)*(A-P*r)-A\n  # Unit root Untuk Rate masing - masing pemnbiayaan\n  try({\n    temp=uniroot(fun, c(0.0000000000001, 0.10))$root\n  },silent=TRUE)\n  v_rate[i]=temp\n}\n\ndf_loan$rate=v_rate\n\n\ndataloan_lengkap=df_loan %>%\n  filter(rate<0.013,\n    data_ke>0) %>%\n  inner_join(df_dependent %>% \n               filter(!is.na(NormMin_Performance)),\n             by=c(\"data_id\")) %>%\n  filter(data_sector>0)  %>%\n  mutate(performance=100*NormMin_Performance,\n         client_branch=as.factor(client_branch))%>%\n  mutate(flag_valid=ifelse(tr_end==0,1, \n                           ifelse(data_jangkawaktu==tr_total_freq,1,0)))\n\n#dataloan_lengkap=readRDS(choose.files())\ndatakredit_auto_awal=dataloan_lengkap %>%\n  inner_join(df_pembiayaan,\n             by=c(\"data_id\")) %>%\n  mutate(data_pengajuan = ifelse(is.na(data_pengajuan),\n                                 data_plafond,\n                                 data_pengajuan))\n#datakredit_auto_awal=readRDS(choose.files())\nnrow(datakredit_auto_awal)\n\n\ndatakredit_auto_awal_valid=datakredit_auto_awal%>%\n  filter(flag_valid==1)%>%\n  select(-c(flag_valid,tr_par,tr_tanggungrenteng,tr_absensi,tr_rn,tr_total_freq,branch,tr_end))\n\n# Re-define default sebagai semua loan yang pernah mengalami par atau tr\n\ndatakredit_auto_awal_valid=datakredit_auto_awal_valid%>%\n  mutate(flag_default=ifelse(as.numeric(flag_default)==0,0,1))%>%\n  mutate(prev_flag_default=ifelse(as.numeric(prev_flag_default)%in% c(1,0.5),1,prev_flag_default))\ntable(datakredit_auto_awal_valid$flag_default)\nprint(prop.table(table(datakredit_auto_awal_valid$flag_default)))\n\n#clean data pendapatan dari karakter \"\",\"-%d\",\"null\" ubah jadi 0\ndatakredit_auto_awal_valid=datakredit_auto_awal_valid%>%\n  mutate(data_pendapatan_suami=as.numeric(gsub(\"[^[:digit:]]\",\"\",data_pendapatan_suami)),\n         data_pendapatan_suami=ifelse(is.na(data_pendapatan_suami),0,data_pendapatan_suami),\n         data_pendapatan_istri=as.numeric(gsub(\"[^[:digit:]]\",\"\",data_pendapatan_istri)),\n         data_pendapatan_istri=ifelse(is.na(data_pendapatan_istri),0,data_pendapatan_istri),\n         data_pendapatan_lain=as.numeric(gsub(\"[^[:digit:]]\",\"\",data_pendapatan_lain)),\n         data_pendapatan_lain=ifelse(is.na(data_pendapatan_lain),0,data_pendapatan_lain))\n\n# ubah beberapa data berikut menjadi nominal\nvar_nominal=c(\"data_jangkawaktu\",\"data_ke\",\"data_sector\",\"prev_flag_default\",\n              \"flag_default\",\"data_keluarga_tidaksekolah\",\"data_keluarga_sd\",\"data_keluarga_smp\",\n              \"data_keluarga_sma\",\"data_keluarga_kuliah\",\"data_keluarga_tanggungan\",\"groupId\")\n\n\ndatakredit_auto_awal_valid=datakredit_auto_awal_valid%>%\n  mutate_at(vars(one_of(var_nominal)),funs(as.character))\n\n#ubah yg character jadi factor\ndatakredit_auto_awal_valid[sapply(datakredit_auto_awal_valid, is.character)] <- lapply(datakredit_auto_awal_valid[sapply(datakredit_auto_awal_valid, is.character)], \n                                       as.factor)\n\n#list semua variabel faktor ubah jadi nominal\nlist_faktor_data=Filter(Negate(is.null),rapply(select(datakredit_auto_awal_valid,-one_of(var_nominal))\n                                               , class = \"factor\", f = levels, how = \"list\"))\n\n#ubah data faktor di datakredit_auto_awal_valid jadi nominal\n#Data NA ubah jadi 0\n#ubah dalam class character\n\ndatakredit_auto_awal_valid=as.data.frame(datakredit_auto_awal_valid)\nfor (faktor in names(list_faktor_data)){\n  datakredit_auto_awal_valid[,faktor]=mapvalues(as.vector(datakredit_auto_awal_valid[,faktor]),\n                                                from = as.vector(list_faktor_data[[faktor]]),\n                                                to= c(1:length(list_faktor_data[[faktor]])))\n  datakredit_auto_awal_valid[,faktor]=as.numeric(datakredit_auto_awal_valid[,faktor])\n  datakredit_auto_awal_valid[,faktor]=ifelse(is.na(datakredit_auto_awal_valid[,faktor]),0,\n                                             datakredit_auto_awal_valid[,faktor])\n  datakredit_auto_awal_valid[,faktor]=as.factor(datakredit_auto_awal_valid[,faktor])\n}\n\n# bagi data training dan testing 75:25 proporsional terhadap flag_default\ntrain=createDataPartition(y = datakredit_auto_awal_valid[,\"flag_default\"],p = .75,list = FALSE)\ntest=-train\ndatakredit_auto_awal_valid[train,\"train_test\"]=\"train\"\ndatakredit_auto_awal_valid[test,\"train_test\"]=\"test\"\n#Data Balancing\n#fungsi untuk mempertahankan perbandingan default:no-default=25:75\np_under=function(p_over){\n  return (300*(p_over+100)/p_over)\n}\n# faktor pengali yang akan digunakan untuk over sampling\nP_OVER=c(500,1000,1500,2000)\nmodel_mars=\n  AUC_mars=\n  model_logistik=\n  AUC_logistik=\n  setNames(vector(\"list\", length(P_OVER)),paste0(\"OverSampling_\",P_OVER))\n\n\nlibrary(DMwR)\n#list_faktor_data[[\"flag_default\"]]\n#good loan ~=99.52%\nif (min(print(prop.table(table(datakredit_auto_awal_valid$flag_default))))<0.25)\n{\n  data_train=datakredit_auto_awal_valid%>%\n    filter(train_test==\"train\")%>%\n    select(-c(train_test,data_id,client_id,rate,data_totalangsuran,data_plafond,groupId))\n  data_test=datakredit_auto_awal_valid%>%\n    filter(train_test==\"test\")%>%\n    select(-c(train_test,data_id,client_id,rate,data_totalangsuran,data_plafond,groupId))%>%\n    mutate_at(vars(one_of(var_nominal)),funs(as.character))%>%\n    mutate_at(vars(one_of(var_nominal)),funs(as.numeric))%>%\n    mutate_at(vars(one_of(c(\"data_sector\",\"prev_flag_default\"))),funs(as.factor))\n  \n  for (it in seq.int(length(P_OVER)))\n  {\n    set.seed(1234)\n    datakredit_auto_awal_valid_smote <- SMOTE(flag_default ~ ., data_train, perc.over = P_OVER[it], perc.under=p_under(P_OVER[it]))\n    \n    #balikin data nominal ke numerik\n    datakredit_auto_awal_valid_smote=datakredit_auto_awal_valid_smote %>%\n      mutate_at(vars(one_of(var_nominal)),funs(as.character))%>%\n      mutate_at(vars(one_of(var_nominal)),funs(as.numeric))%>%\n      mutate_at(vars(one_of(c(\"data_sector\",\"prev_flag_default\"))),funs(as.factor))\n    #run model dan predict\n    vardep=\"flag_default\"\n    var_mars=nama_all=read.csv('input/cstrip_var_mars.csv',as.is = T)$var_model\n    var_num=sapply(datakredit_auto_awal_valid_smote,is.numeric)\n    datakredit_auto_num=datakredit_auto_awal_valid_smote[,var_num]\n    #hitung vif\n    coldatakredit_auto=vif(datakredit_auto_num)\n    \n    #ambil variabel dengan vif <=10\n    dvif=names(which(coldatakredit_auto<=10))\n    datakredit_auto_num1=datakredit_auto_num[,dvif]\n    \n    #hapus variabel numerik pada data awal\n    datakredit_auto2=datakredit_auto_awal_valid_smote[,!var_num]\n    #combine data diatas dengan variabel numerik yang telah lolos uji vif\n    datakredit_auto_model_train=cbind(datakredit_auto2,datakredit_auto_num1)\n    \n    #feauture selection\n    formu=as.formula(paste(vardep,\"~.\"))\n    datakredit_auto_model_train[,vardep]=as.numeric(datakredit_auto_model_train[,vardep])\n    model_mars[[it]]=earth(formu,datakredit_auto_model_train) \n    var_sig_mars=rownames(evimp(model_mars[[it]])) \n    var_all=nama_var_factor(datakredit_auto_model_train)\n    var_indep_sig_mars=unique(var_all$nama[(var_all$var %in% var_sig_mars)])\n    var_sig_mars=c(vardep,var_indep_sig_mars)\n    \n    \n    # #model logistik menggunakan variabel yang signifikan di mars\n    # logistik=glm(formu,datakredit_auto_model_train[,var_sig_mars], family = binomial(link = \"logit\"))\n    # \n    # blogistik=bayesglm(formu,datakredit_auto_model_train[,var_sig_mars], family = binomial(link = \"logit\"))\n    \n    model=glm(formu,datakredit_auto_model_train, family = binomial(link = \"logit\"))\n    #stepwise variable selection\n    logistik=step(model, data = datakredit_auto_model_train)\n    model_logistik[[it]]=logistik\n    \n    #predict data\n    # plot(roc(data_test[,vardep], mars_predict, direction=\"<\"),\n    #      col=\"yellow\", lwd=2, main=paste0(\"ROC over sampling \", P_OVER[it],\" model MARS\"))\n    #AUC_mars[[it]]=roc(data_test[,vardep], predict(model_mars[[it]],data_test[,var_sig_mars]), direction=\"<\")\n    #AUC_logistik[[it]]=roc(data_test[,vardep], predict(model_logistik[[it]],data_test, type=\"response\"), direction=\"<\")\n   }\n}\n\nfor (it in seq.int(length(P_OVER))){\n  AUC_mars[[it]]=roc(data_test[,vardep], predict(model_mars[[it]],data_test[,var_sig_mars]), direction=\"<\")\n  AUC_logistik[[it]]=roc(data_test[,vardep], predict(model_logistik[[it]],data_test, type=\"response\"), direction=\"<\")\n}\n\n\n#table(datakredit_auto_awal_valid_smote$flag_default)\n",
    "created" : 1536228995939.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3290455321",
    "id" : "197008F",
    "lastKnownWriteTime" : 1504078215,
    "last_content_update" : 1504078215,
    "path" : "E:/Sifat/Amartha/Progress/ACILES/Update ACILES/CS/Amartha-r-cstrip-d2a75ea7b3ae/20170824_cstrip_data.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}