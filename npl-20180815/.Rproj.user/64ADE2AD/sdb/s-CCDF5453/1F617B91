{
    "collab_server" : "",
    "contents" : "shinyServer(function(input, output) {\n  \n  r_data <- reactive({\n    \n    req(input$submit)\n    \n    isolate({\n      age_loan=input$batas_tr\n      first=input$Date_disbursement[1]\n      last=input$Date_disbursement[2]\n      transaksi=input$date_last_transaction\n      \n      history_loan=tbl_transaction%>%\n        ungroup()%>%\n        filter(tr_date<=transaksi)%>%\n        group_by(loanId)%>%\n        summarise(flag_default=ifelse(sum(flag_par_tr)>0,1,0),\n                  tr_rn=n())%>%\n        inner_join(df_loan%>%\n                     select(data_id,date_disbursement)%>%\n                     filter(date_disbursement>=first, date_disbursement<last),\n                   by=c(\"loanId\"=\"data_id\"))%>%\n        select(-date_disbursement)\n      \n      df_loan_filter=df_loan%>%\n        inner_join(history_loan %>% \n                     select(data_id=loanId,tr_rn, flag_default), by=\"data_id\")\n      \n      df_pembiayaan_filter=df_pembiayaan_all%>%\n        filter(data_id %in% history_loan$loanId)\n      \n      df_tanpa_demografi=df_loan_filter%>%\n        select(data_id, client_id)%>%\n        filter(!data_id %in% df_pembiayaan_filter$data_id)\n      \n      list_clientId=df_pembiayaan_filter %>%\n        filter(client_id %in% df_tanpa_demografi$client_id)%>%\n        group_by(client_id)%>%\n        summarise(data_id=max(data_id))\n      \n      df_client_demografi=df_pembiayaan_filter %>%\n        filter(data_id %in% list_clientId$data_id)%>%\n        select(-data_id)\n      \n      df_tanpa_demografi=df_tanpa_demografi%>%\n        select(data_id, client_id)%>%\n        inner_join(df_client_demografi, by=c(\"client_id\"))%>%\n        mutate(status=\"tambahan\")\n      \n      #gabung data di demografi di db dan hasil manipulasi berdasarkan data client_id\n      df_pembiayaan_filter=df_pembiayaan_filter%>%\n        rbind(df_tanpa_demografi%>% select_(.dots=names(df_pembiayaan_filter))%>%as.data.frame())%>%\n        select(-client_id)\n      \n      df_pembiayaan_filter=df_pembiayaan_filter%>%\n        mutate(client_religion=ifelse(client_religion %in% c(\"Budha\",\"BUDHA\"),\"Budha\",\n                                      ifelse(client_religion %in% c(\"Islam\",\"ISLAM\"),\"Islam\",\n                                             ifelse(client_religion %in% c(\"Katholik\",\"Katolik\"),\"Katolik\",\n                                                    ifelse(client_religion %in% c(\"Kong Hu Cu\",\"Kong Hu Chu\"),\"Kong Hu Chu\",\n                                                           ifelse(client_religion %in% c(\"Kristen\",\"KRISTEN\",\"Protestan\"),\"Protestan\",\n                                                                  client_religion))))))%>%\n        mutate_at(vars(one_of(var_factor)),funs(f_factor))%>%\n        mutate_at(vars(one_of(var_numeric)),funs(as.numeric))%>%\n        mutate_if(is.numeric, funs(replace(., is.na(.), 0)))\n      \n      \n      #rm(df_tanpa_demografi,df_client_demografi,list_clientId)\n      \n      \n      #sample\n      datakredit_auto_awal=df_loan_filter %>%\n        filter(tr_rn>=age_loan)%>%\n        select(data_id,data_plafond,date_disbursement, flag_default)%>%\n        inner_join(df_pembiayaan_filter, by=c(\"data_id\"))%>%\n        mutate(data_pengajuan=ifelse(data_pengajuan==0, data_plafond, data_pengajuan))\n      datakredit_auto_awal=distinct(datakredit_auto_awal)\n      \n      max_date_disbursement_model=as.character(max(datakredit_auto_awal$date_disbursement))\n      len.month=as.numeric(ceiling((as.Date(last)-as.Date(max_date_disbursement_model))/30))\n      list_date=format(as.Date(seq(chron(max_date_disbursement_model, format = c(dates=\"y-m-d\")), by = \"months\", len = len.month)), \"%Y-%m\")\n      \n      date_validasi=as.Date(paste0(format(max(datakredit_auto_awal$date_disbursement),format=\"%Y\"),\"-\",format(max(datakredit_auto_awal$date_disbursement),format=\"%m\"),\"-01\"))\n      \n      \n      df_loan_raw_filter=df_loan_raw%>%\n        inner_join(tbl_transaction%>%\n                     ungroup()%>%\n                     group_by(loanId)%>%\n                     summarise(flag_default=ifelse(sum(flag_par_tr)>0,1,0),\n                               tr_rn=n())%>%\n                     inner_join(df_loan%>%\n                                    select(data_id,date_disbursement)%>%\n                                  filter(date_disbursement>=date_validasi),\n                                by=c(\"loanId\"=\"data_id\"))%>%\n                     select(data_id=loanId,tr_rn, flag_default,date_disbursement), by=\"data_id\")\n      \n    })\n    \n\n    #source('~/ShinyApps/creditscoring/mars.R', echo=TRUE)#-----\n    ##########################################################\n    #variabel dependen\n    vardep=\"flag_default\"\n    var_mars=nama_all=var_all[var_all$model==\"y\",]$nama_var\n    \n    #Jumlah Variabel\n    min_count=length(var_mars)+1\n    \n    \n    count_jenis=datakredit_auto_awal %>%\n      mutate(jenis=ifelse(data_sector %in% c(1,2,3,4,10),\"produktif\",\"konsumtif\")) %>%\n      group_by(jenis,data_ke) %>%\n      summarise(n=n(),\n                persen_default=sum(flag_default)/n)%>%\n      filter(n>=min_count*3,persen_default>0.02)\n    \n    nama_jenis= count_jenis %>%\n      mutate(nama=paste0(jenis,\"_\",data_ke)) %>%\n      .[[\"nama\"]]\n    \n    n_jenis=length(nama_jenis)\n    \n    rule_jenis_r=function(x) {\n      \n      if(is.null(names(x)))      names(x)=x\n      \n      df_x=data.frame(jenis=substr(names(x),1,9),\n                      data_ke=as.numeric(substr(names(x),11,12)),\n                      set_x=unlist(x),\n                      stringsAsFactors = F)\n      \n      df_x=df_x %>% arrange(jenis,desc(data_ke))\n      \n      for(pilih_jenis in unique(df_x$jenis)) {\n        if(pilih_jenis=='konsumtif') {\n          konsumtif=paste0(\"ifelse(!data_sector %in% c(1,2,3,4,10)\")\n          temp=df_x%>%filter(jenis==pilih_jenis)\n          for (i in 1:dim(temp)[1])\n          {\n            ke=temp[i,]$data_ke\n            set_x=temp[i,]$set_x\n            konsumtif=paste0(konsumtif,\",ifelse(data_ke>=\",ke,\",'\",set_x,\"'\")\n          }\n          konsumtif=paste0(konsumtif,\",''\",paste0(rep(\")\",nrow(temp)),collapse = \"\"))\n        } else {\n          produktif=paste0(\",ifelse(data_sector %in% c(1,2,3,4,10)\")\n          temp=df_x%>%filter(jenis==pilih_jenis)\n          for (i in 1:dim(temp)[1])\n          {\n            ke=temp[i,]$data_ke\n            set_x=temp[i,]$set_x\n            produktif=paste0(produktif,\",ifelse(data_ke>=\",ke,\",'\",set_x,\"'\")\n          }\n          produktif=paste0(produktif,\",''\",paste0(rep(\")\",nrow(temp)),collapse = \"\"),\",'')\")\n          \n        }\n      }\n      \n      return(paste0(konsumtif,produktif,\")\"))\n    }\n    \n    ## Flag Data sesuai Kelompok nya.\n    flag_jenis=rule_jenis_r(nama_jenis)\n    \n    datakredit_auto_awal= datakredit_auto_awal %>%\n      mutate(jenis=ifelse(data_sector %in% c(1,2,3,4,10),\"produktif\",\"konsumtif\")) %>%\n      mutate_(nama_jenis=eval(flag_jenis))%>%\n      mutate_at(vars(one_of(c(\"jenis\",\"nama_jenis\"))),funs(f_factor))\n    \n    # dataloan_lengkap <- df_pembiayaan_filter  %>%\n    #   mutate(jenis=ifelse(data_sector %in% c(1,2,3,4,10),\"produktif\",\"konsumtif\")) %>%\n    #   mutate_(nama_jenis=eval(flag_jenis))%>%\n    #   mutate_at(vars(one_of(c(\"jenis\",\"nama_jenis\"))),funs(f_factor))\n    \n    \n    ##############################################################################################################################\n    datakredit_auto=datakredit_auto_awal%>%\n      select(one_of(c(vardep,var_mars))) %>%\n      as.data.frame()\n    \n    #cek multicolinieraty data numerik\n    #ambil data dengan variabel numerik saja\n    var_num=sapply(datakredit_auto,is.numeric)\n    popi_rmc=grep('popi|rmc',names(var_num))\n    var_num[popi_rmc]=F\n    var_num[vardep]=F\n    \n    datakredit_auto_num=datakredit_auto[,var_num]\n    #hitung vif\n    coldatakredit_auto=vif(datakredit_auto_num)\n    #ambil variabel dengan vif <=10\n    dvif=names(which(coldatakredit_auto<=10))\n    datakredit_auto_num1=datakredit_auto_num[,dvif]\n    #hapus variabel numerik pada data awal\n    datakredit_auto2=datakredit_auto[,!var_num]\n    #combine data diatas dengan variabel numerik yang telah lolos uji vif\n    datakredit_auto_model_train=cbind(datakredit_auto2,datakredit_auto_num1)\n    \n    #feauture selection\n    formu=as.formula(paste(vardep,\"~.\"))\n    \n    #MARS-----\n    set.seed(1234)\n    modelmars_auto=earth(formu,datakredit_auto_model_train, glm=list(family=binomial) ) \n    \n    #prediksi\n    probmodel_mars = as.vector(predict(modelmars_auto, datakredit_auto_model_train, type = \"response\"))\n    datakredit_auto_awal$pd_mars=probmodel_mars\n    \n    \n    # Variabel terpilih\n    var_all_coef=nama_var_factor_coef(datakredit_auto_model_train)\n    \n    var_coef_js=get_coef_js(row.names(modelmars_auto$glm.coefficients),var_all_coef)\n    temp_p2p_csr_js=paste0(var_coef_js,'*',modelmars_auto$glm.coefficients,collapse = '+')\n    set_data_p2p_csr_js=paste0(\"Math.exp(\",temp_p2p_csr_js,\")/(1+Math.exp(\",temp_p2p_csr_js,\"))\")\n    \n    \n    #pdo\n    datakredit_auto_awal$score=481.8621881+28.85390082*log ((1-probmodel_mars)/probmodel_mars)\n    \n    \n    #source('~/ShinyApps/creditscoring/segmentasi.R', echo=TRUE)#--------\n    Break_opt=MAPA(SCORE=datakredit_auto_awal$score,GBI=datakredit_auto_awal$flag_default, n_kuantil=200, n_grade = 6,k_min=4, range = 5)\n    n=length(Break_opt)\n    score_breaks=c(-Inf,Break_opt,Inf)\n    ####################################################################\n    #buat rule berdasarkan break_opt\n    Break_opt=sort(Break_opt, decreasing = T)\n    grade_score=c(\"A\",\"A-\",\"B\",\"C\",\"D\",\"E\")\n    \n    grade_score=grade_score[1:(length(Break_opt)+1)]\n    \n    p2p_grade=paste0(\"case \")\n    p2p_grade_r=paste0(\"\")\n    p2p_grade_js=\"\"\n    for (i in 1:(length(Break_opt)+1))\n    {\n      if(i<(length(Break_opt)+1)) {\n        p2p_grade=paste0(p2p_grade,\"\n                         when data_p2p_csr>=\",round(Break_opt[i],3),\n                         \" then '\",grade_score[i],\"'\")\n        p2p_grade_r=paste0(p2p_grade_r,\n                           \"ifelse(score>\",round(Break_opt[i],3),\n                           \",'\",grade_score[i],\"',\")\n        p2p_grade_js=paste0(p2p_grade_js,\"(data_p2p_csr>=\",round(Break_opt[i],3),\")? '\",\n                            grade_score[i],\"' :\")\n        \n        \n      } else {\n        p2p_grade=paste0(p2p_grade,\" else '\",grade_score[i],\"' end\")\n        p2p_grade_r=paste0(p2p_grade_r,\"'\",grade_score[i],\"')\",\n                           paste0(rep(\")\",(length(Break_opt)-1)),collapse = \"\"))\n        p2p_grade_js=paste0(p2p_grade_js,\"'\",grade_score[i],\"'\")\n      }\n    }\n    \n    set_data_p2p_grade=p2p_grade\n    set_data_p2p_grade_r=p2p_grade_r\n    set_data_p2p_grade_js=p2p_grade_js\n    \n    \n    #################################################\n    \n    datakredit_auto_awal=datakredit_auto_awal%>%\n      mutate_(score_grade=p2p_grade_r)\n    \n    \n    #ctree----\n    #tree\n    formula=flag_default~data_sector+client_branch+data_ke+client_education+\n      client_maritalstatus+client_job+data_client_umur+data_suami_umur+data_suami_pekerjaan+\n      data_pengajuan+data_akad+data_suami_pendidikan+data_popi_jenislantai+\n      data_popi_bahanbakar+data_popi_kulkas+data_popi_motor+data_rmc_jenisdinding+\n      data_rmc_jenislantai+data_pengeluaran_total+data_keluarga_tidaksekolah+\n      data_keluarga_sd+data_keluarga_smp+data_keluarga_sma+data_keluarga_kuliah+\n      data_keluarga_tanggungan+data_pendapatan_istri+data_pendapatan_suami+\n      data_pendapatan_lain \n    \n    \n    #datakredit_auto_awal$flag_default=as.factor(datakredit_auto_awal$flag_default)\n    set.seed(1234)\n    model_tree <- ctree(formula, data=datakredit_auto_awal)\n    \n    datakredit_auto_awal$pred_ctree = sapply(predict(model_tree, newdata=datakredit_auto_awal,type=\"prob\"),'[[',1)  # obtain probability of class 1 (second element from the lists)\n    \n    #score pdo berdasarkan PD model tree \n    datakredit_auto_awal$score_tree=481.8621881+28.85390082*log ((1-datakredit_auto_awal$pred_ctree)/datakredit_auto_awal$pred_ctree)\n    \n    datakredit_auto_awal=datakredit_auto_awal%>%\n      mutate_(score_grade=p2p_grade_r,\n              score_grade_tree=gsub(\"score\",\"score_tree\",p2p_grade_r))\n    \n    \n    #adjustment----\n    #menaikkan distribusi grade A, dengan cara meningkatkan nilai score pada grade A- dan B\n    badrate_all=min(prop.table(table(datakredit_auto_awal$flag_default)))\n    \n    range_adjust_score=max(datakredit_auto_awal%>%filter(score_grade %in% c(\"A-\",\"B\"))%>% select(score))-\n      min(datakredit_auto_awal%>%filter(score_grade %in% c(\"A-\", \"B\"))%>% select(score))\n    range_adjust_PD=max(datakredit_auto_awal%>%filter(score_grade %in% c(\"A-\", \"B\"))%>% select(pred_ctree))-\n      min(datakredit_auto_awal%>%filter(score_grade %in% c(\"A-\",\"B\"))%>% select(pred_ctree))\n    \n    datakredit_auto_awal=datakredit_auto_awal%>%\n      mutate(score_adjust= ifelse(score_grade %in% c(\"A-\",\"B\")&(badrate_all-pred_ctree)>0,\n                                  score+(badrate_all-pred_ctree)*range_adjust_score/range_adjust_PD,score))%>%\n      mutate_(grade_adjust=gsub(\"score\",\"score_adjust\",p2p_grade_r))\n    \n    \n    #validasi-----\n    #data validasi; 6 bulan terakhir dijadikan patokan scaling\n    dataloan_scaling=df_loan_filter %>%\n      select(data_id,data_plafond,flag_default, tr_rn,date_disbursement)%>%\n      inner_join(df_pembiayaan_filter, by=c(\"data_id\"))%>%\n      mutate(data_pengajuan=ifelse(data_pengajuan==0, data_plafond, data_pengajuan))%>%\n      mutate(jenis=ifelse(data_sector %in% c(1,2,3,4,10),\"produktif\",\"konsumtif\")) %>%\n      mutate_(nama_jenis=eval(flag_jenis))%>%\n      mutate_at(vars(one_of(c(\"jenis\",\"nama_jenis\"))),funs(f_factor))%>%\n      mutate(year_month=format(as.Date(date_disbursement), \"%Y-%m\"))%>%\n      filter( year_month %in% list_date)%>%\n      mutate(flag_scaling=ifelse(len.month>6 & year_month %in% list_date[1:(length(list_date)-6)],\"test\",\n                                 \"scaling\"))%>%\n      as.data.frame()\n    \n    data_validasi_PD=NULL\n    data_validasi_PD=as.numeric(predict(modelmars_auto,dataloan_scaling, type=\"response\"))\n    dataloan_scaling$score=481.8621881+28.85390082*log ((1-data_validasi_PD)/data_validasi_PD)\n    dataloan_scaling=dataloan_scaling%>%\n      mutate_(score_grade=p2p_grade_r)\n    \n    # temp=data_validasi%>%\n    #   mutate_(score_grade=p2p_grade_r)%>%\n    #   filter(client_branch %in% unique(datakredit_auto_awal$client_branch))\n    \n    dataloan_scaling$pred_ctree = sapply(predict(model_tree, dataloan_scaling,type=\"prob\"),'[[',1)  # obtain probability of class 1 (second element from the lists)\n    \n    dataloan_scaling=dataloan_scaling%>%\n      mutate(score_adjust= ifelse(score_grade %in% c(\"A-\",\"B\")&(badrate_all-pred_ctree)>0,\n                                  score+(badrate_all-pred_ctree)*range_adjust_score/range_adjust_PD,score))%>%\n      mutate_(grade_adjust=gsub(\"score\",\"score_adjust\",p2p_grade_r))\n    \n    \n    #adjustment di grade A- dan B\n    inbranch=unique(datakredit_auto_awal$client_branch)\n    scorebawah_adjust=round(Break_opt[3],3) #>\n    scoreatas_adjust=round(Break_opt[1],3) #<=\n    \n    #-------------------------------\n    kuantil_demografi=quantile(datakredit_auto_awal$score_adjust, probs =seq (0.001,0.999,0.001))\n    kuantil_scaling=quantile(dataloan_scaling[(dataloan_scaling$flag_scaling ==\"scaling\"),\"score_adjust\"], probs =seq (0.001,0.999,0.001))\n    kuantil_scaling_branch=quantile(dataloan_scaling[(dataloan_scaling$flag_scaling ==\"scaling\" & dataloan_scaling$client_branch %in% inbranch), \"score_adjust\"], probs =seq (0.001,0.999,0.001))\n    kuantil_scaling_unbranch=quantile(dataloan_scaling[(dataloan_scaling$flag_scaling ==\"scaling\" & !dataloan_scaling$client_branch %in% inbranch), \"score_adjust\"], probs =seq (0.001,0.999,0.001))\n    \n    modelscaling_all=lm(kuantil_demografi~kuantil_scaling)\n    modelscaling_branch=lm(kuantil_demografi~kuantil_scaling_branch)\n    modelscaling_unbranch=lm(kuantil_demografi~kuantil_scaling_unbranch)\n    \n    dataloan_scaling=dataloan_scaling%>%\n      mutate(score_adjust_scaling= ifelse(client_branch %in% inbranch,\n                                          round(modelscaling_branch$coefficients[1],3)+round(modelscaling_branch$coefficients[2],3)*score_adjust,\n                                          round(modelscaling_unbranch$coefficients[1],3)+round(modelscaling_unbranch$coefficients[2],3)*score_adjust))%>%\n      mutate_(score_grade_adjust_scaling=gsub(\"score\",\"score_adjust_scaling\",p2p_grade_r))\n    \n    #tree\n    list_tree=CtreePathFuncAllCat(model_tree, var_all)\n    tree_sql=list_tree$SQL\n    #jika ada di luar rule .ex branchnya nambah PD langsung nol harusnya tetep ada, defaultnya badrate all\n    rule_scr_tree=gsub(\"END\",paste0(\"ELSE '\",badrate_all,\"' END\"),tree_sql)\n    \n    tree_json=list_tree$JSON\n    rule_scr_js_tree=paste0(tree_json, \"else {PD_tree=\",badrate_all,\";}\")\n    \n    \n    #source('~/ShinyApps/creditscoring/rule.R', echo=TRUE)#------\n    #data pengeluaran----\n    rule_scr_js_awal=\"{data_keluarga_tidaksekolah = 0;\n    data_keluarga_sd = 0;\n    data_keluarga_smp = 0;\n    data_keluarga_sma = 0;\n    data_keluarga_kuliah = 0;\n    pengeluaran_A = 0;\n    pengeluaran_B = 0;\n    pengeluaran_C = 0;\n    pengeluaran_D = 0;\n    pengeluaran_E = 0;\n    pengeluaran_F = 0;\n    pengeluaran_G = 0;\n    pengeluaran_H = 0;\n    pengeluaran_I = 0;\n    pengeluaran_J = 0;\n    pengeluaran_K = 0;\n    pengeluaran_L = 0;\n    pengeluaran_M = 0;\n    pengeluaran_N = 0;\n    pengeluaran_O = 0;\n    \n    if (typeof tanggungan=='string'){\n    json_data=JSON.parse(tanggungan);\n    }else {\n    json_data=tanggungan;\n    }\n    \n    for (i = 0, l = json_data.length;\n    i < l;\n    i++) {    obj = json_data[i];\n    if (obj.pendidikan=='Tidak Sekolah') {        data_keluarga_tidaksekolah+=1;\n    } else if (obj.pendidikan=='SD & Sederajat') {            data_keluarga_sd+=1;\n    } else if (obj.pendidikan=='SMP & Sederajat') {                data_keluarga_smp+=1;\n    } else if (obj.pendidikan=='SMA & Sederajat') {                    data_keluarga_sma+=1;\n    } else if (obj.pendidikan=='Perguruan Tinggi & Sederajat') {                        data_keluarga_kuliah+=1;\n    };\n    if (obj.kehamilan=='Hamil dan Menyusui') {        pengeluaran_A+=1;\n    pengeluaran_B+=1;\n    } else if (obj.kehamilan=='Hamil') {            pengeluaran_A+=1;\n    } else if (obj.kehamilan=='Menyusui') {                pengeluaran_B+=1;\n    };\n    if (obj.usia<0.5) {        pengeluaran_C+=1;\n    } else if (obj.usia<1) {            pengeluaran_D+=1;\n    } else if (obj.usia<=5) {                pengeluaran_E+=1;\n    } else if (obj.usia<=13) {                    if (obj.jenis_kelamin=='Perempuan') {                        pengeluaran_F+=1;\n    } else if (obj.jenis_kelamin=='Laki-laki') {                            pengeluaran_G+=1;\n    };\n    } else if (obj.usia<=17) {                        if (obj.jenis_kelamin=='Perempuan') {                            pengeluaran_H+=1;\n    } else if (obj.jenis_kelamin=='Laki-laki') {                                pengeluaran_I+=1;\n    };\n    } else if (obj.usia<=65) {                        if (obj.jenis_kelamin=='Perempuan') {                            if (obj.maritalstatus=='Iya') {                                pengeluaran_J+=1;\n    } else if (obj.maritalstatus=='Tidak') {                                    pengeluaran_K+=1;\n    };\n    } else if (obj.jenis_kelamin=='Laki-laki') {                                if (obj.maritalstatus=='Iya') {                                    pengeluaran_L+=1;\n    } else if (obj.maritalstatus=='Tidak') {                                        pengeluaran_M+=1;\n    };\n    };\n    } else if (obj.usia>65) {                        if (obj.jenis_kelamin=='Perempuan') {                            pengeluaran_N+=1;\n    } else if (obj.jenis_kelamin=='Laki-laki') {                                pengeluaran_O+=1;\n    };\n    };\n    };\n    if (data_client_kehamilan=='Hamil dan Menyusui') {    pengeluaran_A+=1;\n    pengeluaran_B+=1;\n    } else if (data_client_kehamilan=='Hamil') {        pengeluaran_A+=1;\n    } else if (data_client_kehamilan=='Menyusui') {            pengeluaran_B+=1;\n    };\n    if (data_client_umur<=17) {    pengeluaran_H+=1;\n    } else if (data_client_umur<=65) {        if (client_maritalstatus=='Belum Menikah') {            pengeluaran_K+=1;\n    } else {                pengeluaran_J+=1;\n    };\n    } else if (data_client_umur>65) {            pengeluaran_N+=1;\n    };\n    data_pengeluaran_total=255953+pengeluaran_A*607076+pengeluaran_B*497915+pengeluaran_C*55548+pengeluaran_D*363030+pengeluaran_E*452575+pengeluaran_F*427395+pengeluaran_G*443301+pengeluaran_H*535636+pengeluaran_I*533923+pengeluaran_J*403633+pengeluaran_K*421177+pengeluaran_L*398411+pengeluaran_M*415955+pengeluaran_N*403633+pengeluaran_O*394464;\n    data_keluarga_tanggungan=json_data.length;\"\n    \n    \n    # Probability of Default Demografi dengan MARS----\n    rule_scr_js_mars=paste0(\"scr_mars=\",set_data_p2p_csr_js,\";\")\n    \n    #Probability of Default Demografi dengan ctree-----\n    ##rule_scr_js_tree #PD_tree\n    \n    \n    # Score Points Double the Odd dari PD_combo----\n    score_pdo_mars=\"score_pdo_mars=481.8621881+28.85390082*Math.log((1-scr_mars)/scr_mars);\"\n    \n    # Score segmentasi\n    #segmentasi dilakukan pada grade A- dan B\n    \n    score_segmentasi_mars=paste0(\"if (score_pdo_mars>\",scorebawah_adjust, \" && score_pdo_mars<=\",scoreatas_adjust,\" && (\",badrate_all,\"-PD_tree>0)){\nscore_segmentasi_mars=score_pdo_mars+(\",badrate_all,\"-PD_tree)*\",range_adjust_score,\"/\",range_adjust_PD,\";\n}else{score_segmentasi_mars=score_pdo_mars;}\")\n    \n    #scaling----\n    score_adj=paste0(\"if (\",toJSON(as.numeric(as.character(inbranch))),\".indexOf(parseInt(client_branch))>=0) {\n  score_adj=\",round(modelscaling_branch$coefficients[1],3),\"+\",round(modelscaling_branch$coefficients[2],3),\"*score_segmentasi_mars;\n}else{\n  score_adj=\",round(modelscaling_unbranch$coefficients[1],3),\"+\",round(modelscaling_unbranch$coefficients[2],3),\"*score_segmentasi_mars;\n}\")\n    \n    rule_scr_js_akhir=paste0(\"score=score_adj;\nscore;}\")\n    \n    \n    \n    # Score tanpa Psikometri\n    scr_js=paste(rule_scr_js_awal,\n                 rule_scr_js_mars,\n                 rule_scr_js_tree,\n                 score_pdo_mars,\n                 score_segmentasi_mars,\n                 score_adj,\n                 rule_scr_js_akhir,sep=\"\\n\\n\")\n    \n    #set_data_p2p_grade_js\n    \n    write.table(scr_js, \"~/ShinyApps/creditscoring/input/data_p2p_csr.txt\",col.names = F, row.names = F)\n    write.table(set_data_p2p_grade_js, \"~/ShinyApps/creditscoring/input/data_p2p_grade.txt\",col.names = F, row.names = F)\n    \n    # #source('~/ShinyApps/creditscoring/data_validasi.R', echo=TRUE)#-------\n    # \n    # \n    # df_loan_raw_filter$score=0\n    # df_loan_raw_filter$grade=0\n    # df_loan_raw_filter$score_adjust=0\n    # df_loan_raw_filter$grade_adjust=0\n    # df_loan_raw_filter$score_scaling=0\n    # df_loan_raw_filter$grade_scaling=0\n    # df_loan_raw_filter$PD_mars=0\n    # df_loan_raw_filter$PD_tree=0\n    # df_loan_raw_filter$data_keluarga_tanggungan=0\n    # \n    # for (i in 1:nrow(df_loan_raw_filter)){\n    #   ct <- v8(global=\"window\")\n    #   text_data = paste('var foo=',df_loan_raw_filter$`_raw`[i])\n    #   ct$assign(\"tanggungan\",\"[]\")\n    #   ct$assign(\"client_maritalstatus\",\"\")\n    #   ct$assign(\"client_branch\",\"\")\n    #   ct$assign(\"data_rmc_jenislantai\",\"\")\n    #   ct$assign(\"client_job\",\"\")\n    #   ct$assign(\"client_education\",\"\")\n    #   ct$assign(\"data_popi_kulkas\",\"null\")\n    #   ct$assign(\"data_ke\",\"\")\n    #   ct$assign(\"model\",\"\")\n    #   ct$eval(text_data)\n    #   ct$eval('for (name in foo) {window[name]=foo[name]}')\n    # \n    #   #class(try (ct$eval(scr_js)))==\"try-error\" ||\n    #   if (class(ct$get(\"tanggungan\"))==\"list\"){\n    #     ct$assign(\"tanggungan\",\"[]\")\n    #   }\n    # \n    #   #data dengan client_branch=null atau\n    #   #print(ct$eval(\"parseInt(data_ke)>0\"))\n    #   if (!is.null(ct$get(\"client_branch\")) &!is.null(ct$get(\"data_ke\")) & ct$eval(\"parseInt(data_ke)>0\")==\"true\" & ct$eval(\"parseInt(data_suami_umur)>0\")==\"true\"){\n    #     ct$eval(\"data_suami_umur=parseInt(data_suami_umur)\")\n    #     if (is.null(ct$get(\"data_popi_kulkas\"))){\n    #       ct$assign(\"data_popi_kulkas\",\"null\")\n    #     }\n    #     if (is.null(ct$get(\"data_rmc_jenislantai\"))){\n    #       ct$assign(\"data_rmc_jenislantai\",\"null\")\n    #     }\n    #     if (is.null(ct$get(\"client_job\"))){\n    #       ct$assign(\"client_job\",\"null\")\n    #     }\n    #     if (is.null(ct$get(\"client_education\"))){\n    #       ct$assign(\"client_education\",\"null\")\n    #     }\n    #     ct$eval(scr_js)\n    # \n    #     if (ct$eval(scr_js)!=\"Infinity\"){\n    #       df_loan_raw_filter$score[i]=ct$get(\"score_pdo_mars\")\n    #       ct$eval('var data_p2p_csr=score_pdo_mars')\n    #       df_loan_raw_filter$grade[i]=ct$eval(set_data_p2p_grade_js)\n    # \n    #       df_loan_raw_filter$score_adjust[i]=ct$get(\"score_segmentasi_mars\")\n    #       ct$eval('var data_p2p_csr=score_segmentasi_mars')\n    #       df_loan_raw_filter$grade_adjust[i]=ct$eval(set_data_p2p_grade_js)\n    # \n    #       df_loan_raw_filter$score_scaling[i]=ct$get(\"score\")\n    #       ct$eval('var data_p2p_csr=score')\n    #       df_loan_raw_filter$grade_scaling[i]=ct$eval(set_data_p2p_grade_js)\n    # \n    #       df_loan_raw_filter$PD_mars[i]=ct$get(\"scr_mars\")\n    #       df_loan_raw_filter$PD_tree[i]=ct$get(\"PD_tree\")\n    #       df_loan_raw_filter$data_keluarga_tanggungan[i]=ct$get(\"data_keluarga_tanggungan\")\n    #     }\n    # \n    # \n    #   }\n    # \n    # }\n    # \n    # data_validasi=df_loan_raw_filter%>%\n    #   filter(grade!=\"0\")%>%\n    #   select(-`_raw`)\n    # \n    # # saveRDS(data_validasi,\"~/ShinyApps/creditscoring/input/data_validasi.rds\")\n    # # \n    \n    \n    #########data validasi sample----\n    data_validasi=readRDS(\"~/ShinyApps/creditscoring/input/data_validasi.rds\")\n    #\n    #####-------------------------\n    data_validasi=data_validasi%>%\n      mutate(year_month=ifelse(month(date_disbursement)<10,\n                               paste0(year(date_disbursement),\"-0\",month(date_disbursement)),\n                               paste0(year(date_disbursement),\"-\",month(date_disbursement))))\n\n    data_model=datakredit_auto_awal%>%\n      select(Grade=grade_adjust)%>%\n      mutate(year_month=\"0\")%>%\n      group_by(Grade, year_month)%>%\n      summarise(Total=n())\n\n    data_model_validasi=data_validasi%>%\n      select(Grade=grade_scaling,date_disbursement)%>%\n      mutate(year_month=ifelse(month(date_disbursement)<10,\n                               paste0(year(date_disbursement),\"-0\",month(date_disbursement)),\n                               paste0(year(date_disbursement),\"-\",month(date_disbursement))))%>%\n      group_by(Grade, year_month)%>%\n      summarise(Total=n())\n\n    data_PSI=rbind(data_model, data_model_validasi)%>%\n      group_by(year_month)%>%\n      mutate(dist=Total/sum(Total))%>%\n      arrange(year_month, Grade)%>%\n      inner_join(data_model%>%\n                   ungroup()%>%\n                   mutate(exp=Total/sum(Total))%>%\n                   select(Grade, exp),\n                 by=\"Grade\")%>%\n      mutate(p_psi=100*(exp-dist)*log(exp/dist),\n             p_dist=100*dist)%>%\n      select(Grade,year_month,Total,p_dist, p_psi)\n\n    data_PSI_total=data_PSI%>%\n      ungroup()%>%\n      mutate(Grade=\"Total\")%>%\n      group_by(Grade,year_month)%>%\n      summarise(Total=sum(Total),\n                p_dist=sum(p_dist),\n                p_psi=sum(p_psi))%>%\n      select(Grade,year_month,Total,p_dist, p_psi)\n\n    data_PSI=rbind(data_PSI,data_PSI_total)%>%\n      mutate(p_dist=round(p_dist,2),\n            p_dist=round(p_dist,2))%>%\n      arrange(year_month, Grade)\n\n    #performa score\n    data_performa=data_validasi%>%\n      #filter(year_month %in% list_date)%>%\n      #filter(year_month %in% list_date[1:3])%>%\n      select(data_id, score=score_scaling, grade=grade_scaling,year_month, flag_default)\n    history_loan_performa=tbl_transaction%>%\n      filter(loanId %in% data_performa$data_id)%>%\n      ungroup()%>%\n      group_by(loanId)%>%\n      summarise(flag_default=ifelse(sum(flag_par_tr)>0,1,0))\n\n    data_performa=data_performa%>%\n      rbind(datakredit_auto_awal%>%\n              mutate(year_month=\"model\")%>%\n              select(data_id, score=score_adjust, grade=grade_adjust, year_month, flag_default))%>%\n      group_by(year_month, grade)%>%\n      summarise(Bad=as.integer(sum(flag_default)),\n                Total=n())%>%\n      mutate(Good=Total-Bad)%>%\n      as.data.frame()%>%\n      rbind(data.frame(year_month=c(\"model\", unique(data_performa$year_month)),\n                       grade=rep(1,1+length(unique(data_performa$year_month))), \n                       Bad=rep(0,1+length(unique(data_performa$year_month))),\n                       Total=rep(0,1+length(unique(data_performa$year_month))), \n                       Good=rep(0,1+length(unique(data_performa$year_month)))))%>%\n      ungroup()%>%\n      arrange(year_month,grade)%>%\n      group_by(year_month)%>%\n      mutate(dist=Total/sum(Total))%>%\n      mutate(cum_Good=cumsum(Good)) %>%\n      mutate(cum_Bad=cumsum(Bad)) %>%\n      mutate(KS=round(100*abs(cum_Bad/sum(Bad)-cum_Good/sum(Good)),2))%>%\n      mutate(FPR=1-cum_Good/sum(Good),\n             TPR=1-cum_Bad/sum(Bad))%>%\n      mutate(AUC=c(-diff(FPR),0)*TPR)%>%\n      mutate(AUC=c(0,AUC[-length(AUC)]))%>%\n      select(-cum_Bad,-cum_Good, -FPR,-TPR)%>%\n      filter(grade!=1)%>%\n      as.data.frame()%>%\n      rbind(data.frame(year_month=c(\"model\", unique(data_performa$year_month)),\n                       grade=rep(\"Total\",1+length(unique(data_performa$year_month))),\n                       Bad=rep(0,1+length(unique(data_performa$year_month))), \n                       Total=rep(0,1+length(unique(data_performa$year_month))), \n                       Good=rep(0,1+length(unique(data_performa$year_month))), \n                       dist=rep(0,1+length(unique(data_performa$year_month))), \n                       KS=rep(0,1+length(unique(data_performa$year_month))), \n                       AUC=rep(0,1+length(unique(data_performa$year_month)))))%>%\n      group_by(year_month)%>%\n      mutate(Total=as.integer(ifelse(grade==\"Total\",sum(Total),Total)),\n             Bad=as.integer(ifelse(grade==\"Total\",sum(Bad),Bad)),\n             Good=as.integer(ifelse(grade==\"Total\",sum(Good),Good)),\n             KS=ifelse(grade==\"Total\",max(KS),KS),\n             AUC=round(ifelse(grade==\"Total\",sum(AUC),AUC),4))%>%\n      mutate(BadRate=round(100*Bad/Total,2),\n             Dist=round(100*Total/max(Total),2))%>%\n      select(year_month, Grade=grade, Good, Bad, Total, BadRate, Dist,KS, AUC)\n    \n    LIST=list()\n    LIST$data_train=datakredit_auto_awal\n    LIST$data_validasi=data_validasi\n    LIST$mars=modelmars_auto\n    LIST$tree=model_tree\n    LIST$scaling_inbranch=modelscaling_branch\n    LIST$scaling_unbranch=modelscaling_unbranch\n    LIST$p2p_grade_r=p2p_grade_r\n    LIST$batas_grade=Break_opt\n    LIST$jenis=rule_jenis_r\n    LIST$age_loan=age_loan\n    LIST$fist_booking=first\n    LIST$last_booking=last\n    LIST$last_date=transaksi\n    LIST$data_transaksi=tbl_transaction %>%\n      filter(loanId %in% datakredit_auto_awal$data_id )%>%\n      inner_join(df_loan%>% select(loanId=data_id,date_disbursement), by=c(\"loanId\"))\n    LIST$PSI_total=data_PSI %>%\n      select(Grade, year_month, Total)%>%\n      spread(year_month,Total)%>%\n      rename(model=`0`)\n    LIST$PSI_dist=data_PSI %>%\n      mutate(Grade=ifelse(Grade==\"Total\",\"PSI\",Grade),\n             p_dist=ifelse(Grade==\"PSI\",p_psi,p_dist))%>%\n      select(Grade, year_month, Dist=p_dist)%>%\n      spread(year_month,Dist)%>%\n      rename(model=`0`)\n    LIST$data_performa=data_performa\n    LIST$data_performa_month1=data_performa %>%\n      ungroup()%>%\n      filter(year_month==list_date[1])%>%\n      select(-year_month)\n    LIST$data_performa_month2=data_performa %>%\n      ungroup()%>%\n      filter(year_month==list_date[2])%>%\n      select(-year_month)\n    LIST$data_performa_month3=data_performa %>%\n      ungroup()%>%\n      filter(year_month==list_date[3])%>%\n      select(-year_month)\n\n    LIST$list_date=list_date\n    #saveRDS(LIST,\"~/ShinyApps/creditscoring/input/LIST.rds\")\n\n    #saveRDS(datakredit_auto_awal,\"~/ShinyApps/creditscoring/input/data_train.rds\")\n    # rm (count_jenis,data_validasi,datakredit_auto,datakredit_auto_model_train,\n    #     datakredit_auto_num,datakredit_auto_num1, datakredit_auto2, history_loan, model_tree,modelmars_auto)\n    # rm(data_model,data_model_validasi,data_PSI,data_PSI_total,data_performa,history_loan_performa)\n    return(LIST)\n  })\n  \n  \n  #PD Model ----\n  \n  output$info<-renderPrint({\n    cat(paste0(\"Data yang digunakan merupakan data loan Normal yang disbursement \npada tanggal \", min(r_data()$data_train$date_disbursement),\" sampai \",max(r_data()$data_train$date_disbursement),\". \nTotal terdapat \",nrow(r_data()$data_train),\" yang digunakan.\"))\n  })\n  \n  output$histogram_pd_mars <- renderPlotly({\n    data=r_data()$data_train %>%\n      select(Probability_of_Default=pd_mars)\n    ggplotly(\n      ggplot(data, aes(x=Probability_of_Default))+\n        geom_histogram(aes(y = ..density..), binwidth=density(data$Probability_of_Default)$bw) +\n        geom_density(fill=\"red\", alpha = 0.2)\n    )\n  })\n  \n  output$roc_mars <- renderPlot({\n    data=r_data()$data_train %>%\n      select(default=flag_default, PD=pd_mars)\n    library(pROC)\n    RocMars=roc(data$default,data$PD,direction = \"<\")\n    plot(RocMars,print.auc = TRUE, col = \"blue\")\n  })\n  \n  output$ks_mars <- renderPlot({\n    #https://rpubs.com/mharris/KSplot\n    data=r_data()$data_train%>%\n      select(flag=flag_default,score=pd_mars)%>%\n      mutate(flag= ifelse(flag==1,\"Bad\",\"Good\"))\n    Bad=data%>%\n      filter(flag==\"Bad\")%>%\n      select(score)\n    Good=data%>%\n      filter(flag==\"Good\")%>%\n      select(score)\n    cdf_Bad=ecdf(Bad$score)\n    cdf_Good=ecdf(Good$score)\n    \n    # find min and max statistics to draw line between points of greatest distance\n    minMax <- seq(min(Bad$score, Good$score), max(Bad$score, Good$score), length.out=length(Bad$score)) \n    x0 <- minMax[which( abs(cdf_Bad(minMax) - cdf_Good(minMax)) == max(abs(cdf_Bad(minMax) - cdf_Good(minMax))) )] \n    y0 <- cdf_Good(x0) \n    y1 <- cdf_Bad(x0)\n    \n    ggplot(data, aes(x = score, group = flag, color = flag))+\n      stat_ecdf(size=1) +\n      theme_bw(base_size = 20) +\n      theme(legend.position =\"top\") +\n      xlab(\"Probability of Default\") +\n      ylab(\"ECDF\") +\n      geom_segment(aes(x = x0[1], y = y0[1], xend = x0[1], yend = y1[1]),\n                   linetype = \"dashed\", color = \"blue\") +\n      geom_point(aes(x = x0[1] , y= y0[1]), color=\"blue\", size=8) +\n      geom_point(aes(x = x0[1] , y= y1[1]), color=\"blue\", size=8) +\n      annotate(\"text\", x = 0.05, y = 1, label = paste(\"KS =\",round(y0[1]-y1[1],4)),size = 8)\n    \n  })\n  \n  output$text_mars<-renderPrint({\n    summary(r_data()$mars)\n  })\n  \n  #PDO Model----\n  output$histogram_mars <- renderPlotly({\n    data=r_data()$data_train %>%\n      select(score)\n    ggplotly(\n      ggplot(data, aes(x=score))+\n        geom_histogram(aes(y = ..density..), binwidth=density(data$score)$bw) +\n        geom_density(fill=\"red\", alpha = 0.2)\n    )\n  })\n  \n  output$summary_grade_mars <- renderTable({\n    #http://www.real-statistics.com/descriptive-statistics/roc-curve-classification-table/roc-curve/\n    r_data()$data_train%>%\n      group_by(score_grade)%>%\n      summarise(min_score=min(score_adjust),\n                max_score=max(score_adjust),\n                Total=n(),\n                Bad=sum(flag_default))%>%\n      rename(Grade=score_grade)%>%\n      rbind(data.frame(Grade=1,min_score=0,max_score=0, Total=0, Bad=0))%>%\n      arrange(Grade)%>%\n      mutate(Good=Total-Bad)%>%\n      mutate(cum_Good=cumsum(Good)) %>%\n      mutate(cum_Bad=cumsum(Bad)) %>%\n      mutate(KS=round(100*abs(cum_Bad/sum(Bad)-cum_Good/sum(Good)),2))%>%\n      mutate(FPR=1-cum_Good/sum(Good),\n             TPR=1-cum_Bad/sum(Bad))%>%\n      mutate(AUC=c(-diff(FPR),0)*TPR)%>%\n      mutate(AUC=c(0,AUC[-length(AUC)]))%>%\n      select(-cum_Bad,-cum_Good, -FPR,-TPR)%>%\n      filter(Grade!=1)%>%\n      rbind(data.frame(Grade=\"Total\",min_score=NA, max_score=NA,Total=0, Bad=0, Good=0, KS=0, AUC=0))%>%\n      mutate(Total=as.integer(ifelse(Grade==\"Total\",sum(Total),Total)),\n             Bad=as.integer(ifelse(Grade==\"Total\",sum(Bad),Bad)),\n             Good=as.integer(ifelse(Grade==\"Total\",sum(Good),Good)),\n             KS=ifelse(Grade==\"Total\",max(KS),KS),\n             AUC=round(ifelse(Grade==\"Total\",sum(AUC),AUC),4))%>%\n      mutate(BadRate=round(100*Bad/Total,2),\n             Dist=round(100*Total/max(Total),2))%>%\n      select(Grade,min_score,max_score,Bad, Good, Total, BadRate, Dist, KS, AUC)\n  })\n  \n  output$vintage_mars <- renderPlotly({\n    #flag_ever_par_tr\n    data=r_data()$data_transaksi%>%\n      group_by(loanId)%>%\n      arrange(tr_date)%>%\n      mutate(week=row_number(),\n             flag_ever_par_tr=ifelse(cumsum(flag_par_tr)>0,1,0))%>%\n      filter(week<=50)%>%\n      inner_join(r_data()$data_train%>%\n                   select(loanId=data_id, Grade=score_grade),\n                 by=\"loanId\")%>%\n      group_by(week, Grade)%>%\n      summarise(default=sum(flag_ever_par_tr),\n                account=n())%>%\n      select(week,Grade, default, account)\n    data_total=data%>%\n      mutate(Grade=\"Total\")%>%\n      group_by(week, Grade)%>%\n      summarise(default=sum(default),\n                account=sum(account))%>%\n      select(week,Grade, default, account)\n    data=rbind(data, data_total)%>%\n      mutate(BadRate=ifelse(default==0,NA,100*default/account))\n\n    ggplotly(\n      ggplot(data, aes(week,BadRate, colour = Grade)) +\n        geom_line() +\n        xlab(\"Week on Book (WoB)\") + ylab(\"Persen of Bad Rate\")\n    )\n  })\n\n  \n #Segmentasi-------\n  \n  output$plot_tree <- renderPlot({\n    plot(r_data()$tree, main=\"Multivariate Path\", type = \"simple\")\n  })\n\n  output$histogram_segmentasi <-  renderPlotly({\n    data=r_data()$data_train %>%\n      select(score=score_adjust)\n    ggplotly(\n      ggplot(data, aes(x=score))+\n        geom_histogram(aes(y = ..density..), binwidth=density(data$score)$bw) +\n        geom_density(fill=\"red\", alpha = 0.2)\n    )\n  })\n  \n  output$summary_grade_segmentasi <- renderTable({\n    r_data()$data_train%>%\n      group_by(grade_adjust)%>%\n      summarise(min_score=min(score_adjust),\n                max_score=max(score_adjust),\n                Total=n(),\n                Bad=sum(flag_default))%>%\n      rename(Grade=grade_adjust)%>%\n      rbind(data.frame(Grade=1,min_score=0,max_score=0, Total=0, Bad=0))%>%\n      arrange(Grade)%>%\n      mutate(Good=Total-Bad)%>%\n      mutate(cum_Good=cumsum(Good)) %>%\n      mutate(cum_Bad=cumsum(Bad)) %>%\n      mutate(KS=round(100*abs(cum_Bad/sum(Bad)-cum_Good/sum(Good)),2))%>%\n      mutate(FPR=1-cum_Good/sum(Good),\n             TPR=1-cum_Bad/sum(Bad))%>%\n      mutate(AUC=c(-diff(FPR),0)*TPR)%>%\n      mutate(AUC=c(0,AUC[-length(AUC)]))%>%\n      select(-cum_Bad,-cum_Good, -FPR,-TPR)%>%\n      filter(Grade!=1)%>%\n      rbind(data.frame(Grade=\"Total\",min_score=NA, max_score=NA,Total=0, Bad=0, Good=0, KS=0, AUC=0))%>%\n      mutate(Total=as.integer(ifelse(Grade==\"Total\",sum(Total),Total)),\n             Bad=as.integer(ifelse(Grade==\"Total\",sum(Bad),Bad)),\n             Good=as.integer(ifelse(Grade==\"Total\",sum(Good),Good)),\n             KS=ifelse(Grade==\"Total\",max(KS),KS),\n             AUC=round(ifelse(Grade==\"Total\",sum(AUC),AUC),4))%>%\n      mutate(BadRate=round(100*Bad/Total,2),\n             Dist=round(100*Total/max(Total),2))%>%\n      select(Grade,min_score,max_score,Bad, Good, Total, BadRate, Dist, KS, AUC)\n  })\n  \n  output$vintage_score <- renderPlotly({\n    #flag_ever_par_tr\n    data=r_data()$data_transaksi%>%\n      group_by(loanId)%>%\n      arrange(tr_date)%>%\n      mutate(week=row_number(),\n             flag_ever_par_tr=ifelse(cumsum(flag_par_tr)>0,1,0))%>%\n      filter(week<=50)%>%\n      inner_join(r_data()$data_train%>%\n                   select(loanId=data_id, Grade=grade_adjust),\n                 by=\"loanId\")%>%\n      group_by(week, Grade)%>%\n      summarise(default=sum(flag_ever_par_tr),\n                account=n())%>%\n      select(week,Grade, default, account)\n    data_total=data%>%\n      mutate(Grade=\"Total\")%>%\n      group_by(week, Grade)%>%\n      summarise(default=sum(default),\n                account=sum(account))%>%\n      select(week,Grade, default, account)\n    data=rbind(data, data_total)%>%\n      mutate(BadRate=ifelse(default==0,NA,100*default/account))\n    \n    ggplotly(\n      ggplot(data, aes(week,BadRate, colour = Grade)) +\n        geom_line() +\n        xlab(\"Week on Book (WoB)\") + ylab(\"Persen of Bad Rate\")\n    )\n  })\n  \n\n  #Validasi---\n  \n  output$scaling<- renderText({\n    paste0(\"Proses scaling dilakukan untuk mengantisipasi adanya shifting pada populasi\",\"\\n\",\n           \"Score Inbranch = \",round(as.numeric(coefficients(r_data()$scaling_inbranch)[1]),3),\" + \",round(as.numeric(coefficients(r_data()$scaling_inbranch)[2]),3),\"*Score\",\"\\n\",\n           \"Score Unbranch = \",round(as.numeric(coefficients(r_data()$scaling_unbranch)[1]),3),\" + \",round(as.numeric(coefficients(r_data()$scaling_unbranch)[2]),3),\"*Score\",\"\\n\")\n  })\n  output$tabel_psi_total <-renderTable({\n    r_data()$PSI_total\n  })\n  \n  output$tabel_psi_dist <-renderTable({\n    r_data()$PSI_dist\n  })\n  \n  \n  \n  #Performa Score-----\n  # 3 bulan setelah data_train\n\n  # distribusi_performa\n  output$distribusi_performa <- renderPlotly({\n    data=r_data()$data_performa%>%\n      filter(Grade!=\"Total\")%>%\n      ungroup()\n    ggplotly(\n      ggplot(data, aes(x=Grade,y=Dist, group = year_month, color=year_month)) +\n        geom_line() +\n        xlab(\"Grade\") + ylab(\"Persen Distribusi\")\n    )\n  })\n  # badrate_performa\n  output$badrate_performa <- renderPlotly({\n    data=r_data()$data_performa%>%\n      filter(Grade!=\"Total\")%>%\n      ungroup()\n    ggplotly(\n      ggplot(data, aes(x=Grade,y=BadRate, group = year_month, color=year_month)) +\n        geom_line() +\n        xlab(\"Grade\") + ylab(\"Persen Bad Rate\")\n    )\n  })\n  # dist_grade_model\n  output$dist_grade_model<-renderTable({\n    r_data()$data_performa%>%\n      ungroup()%>%\n      filter(year_month==\"model\")%>%\n      select(-year_month)\n  })\n  # dist_grade_month1\n\n  output$month1<-renderText({\n    paste0(\"Distribusi \",r_data()$list_date[1])\n  })\n\n  output$dist_grade_month1 <-renderTable({\n    r_data()$data_performa_month1\n  })\n  # dist_grade_month2\n  output$month2<-renderText({\n    paste0(\"Distribusi \",r_data()$list_date[2])\n  })\n  output$dist_grade_month2 <- renderTable({\n    r_data()$data_performa_month2\n  })\n  # dist_grade_month3\n  output$month3<-renderText({\n    paste0(\"Distribusi \",r_data()$list_date[3])\n  })\n  output$dist_grade_month3 <- renderTable({\n    r_data()$data_performa_month3\n  })\n\n})",
    "created" : 1536548402741.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "888809225",
    "id" : "1F617B91",
    "lastKnownWriteTime" : 1517463042,
    "last_content_update" : 1517463042,
    "path" : "C:/Users/SITIFA~1/AppData/Local/Temp/Rar$DI01.049/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}