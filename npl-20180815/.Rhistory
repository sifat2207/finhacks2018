roc.curve
con
con$byClass
model_xgboost$raw
model_xgboost$niter
model_xgboost$evaluation_log
roc.curve
con
con$byClass
con$table
14131/(14131+3)
14131/(14131+195)
select(data_train%>% select(flag_kredit_macet,pred))
View(data_train%>% select(flag_kredit_macet,pred))
data_train=data_train%>%mutate(flag_pred=else)
data_train=data_train%>%mutate(flag_pred=ifelse(pred>0.5,1,0))
ftable(data_train$flag_kredit_macet,data_train$flag_pred)
1164/(1164+195)
set.seed(1234)
data_smote=data_train%>%select_(.dots=c(vardep,list_features[["feature_1"]]))
data_smote=data_train
data_smote$flag_kredit_macet=as.character(data_smote$flag_kredit_macet)
data_smote$flag_kredit_macet=as.factor(data_smote$flag_kredit_macet)
data_smote <- SMOTE(flag_kredit_macet ~ .,
data=data_smote,
perc.over = 200, perc.under=300)
source('E:/Sifat/finhacks2018/boluemprit/npl-20180815/smote function.R')
data_smote <- SMOTE(flag_kredit_macet ~ .,
data=data_smote,
perc.over = 200, perc.under=300)
data_smote$flag_kredit_macet=as.character(data_smote$flag_kredit_macet)
data_smote$flag_kredit_macet=as.numeric(data_smote$flag_kredit_macet)
region_smote <- model.matrix(~kode_cabang-1,data_smote)
delikuensi_smote <- model.matrix(~skor_delikuensi-1,data_smote)
data_numerik_smote=data_smote%>%select_(.dots=c(var_numerik))
data_numerik_smote=cbind(data_numerik_smote,region_smote,delikuensi_smote)
data_numerik_smote=data_smote%>%select(-kode_cabang,-skor_delikuensi,-flag_kredit_macet)
data_numerik_smote=cbind(data_numerik_smote,region_smote,delikuensi_smote)
data_matrix_smote <- data.matrix(data_numerik_smote)
train_label_smote=data.matrix(data_smote%>%select_(.dots=c(vardep)))
dtrain_smote <- xgb.DMatrix(data = data_matrix_smote, label=train_label_smote )
model_xgboost_smote <- xgboost(data = dtrain_smote, # the data
nround = 2, # max number of boosting iterations
objective = "binary:logistic")  # the objective function
model_xgboost_smote <- xgboost(data = dtrain_smote, # the data
nround = 100, # max number of boosting iterations
objective = "binary:logistic")  # the objective function
data_smote$pred <- predict(model_xgboost_smote, dtrain_smote)
roc.curve_smote <- roc(data_smote$flag_kredit_macet, data_smote$pred, ci=T)
roc.curve_smote
con_smote=confusionMatrix(factor(data_smote$pred>threshold), factor(data_smote$flag_kredit_macet==1), positive="TRUE")
con_smote
data_train$pred_smote <- predict(model_xgboost_smote, dtrain)
dtrain
model_xgboost_smote
dtrain_smote
library(dplyr)
library(pROC)
library(caret)
library(xgboost)
data_train=read.csv("npl_train.csv")%>%
select(-X)
data_test=read.csv("npl_test.csv")%>%
select(-X)
summary(data_train)
summary(data_test)
vardep="flag_kredit_macet"
var_nominal=c("kode_cabang","skor_delikuensi")
data_train=data_train%>%
mutate_at(vars(one_of(var_nominal)),funs(as.character))%>%
mutate_at(vars(one_of(var_nominal)),funs(as.factor))
data_test=data_test%>%
mutate_at(vars(one_of(var_nominal)),funs(as.character))%>%
mutate_at(vars(one_of(var_nominal)),funs(as.factor))
levels(data_test$kode_cabang)=levels(data_train$kode_cabang)
levels(data_test$skor_delikuensi)=levels(data_train$skor_delikuensi)
levels(data_test$skor_delikuensi)
levels(data_test$kode_cabang)
levels(data_train$kode_cabang)
formu=as.formula(paste(vardep,"~."))
threshold <- 0.5
data_numerik=data_train%>%
select(-kode_cabang,-skor_delikuensi,-flag_kredit_macet)
region <- model.matrix(~kode_cabang-1,data_train)
delikuensi <- model.matrix(~skor_delikuensi-1,data_train)
data_numerik=cbind(data_numerik,delikuensi,region)
data_matrix <- data.matrix(data_numerik)
train_label=data.matrix(data_train%>%select_(.dots=c(vardep)))
dtrain <- xgb.DMatrix(data = data_matrix, label=train_label )
model_xgboost <- xgboost(data = dtrain, # the data
nround = 100, # max number of boosting iterations
objective = "binary:logistic")  # the objective function
data_train$pred <- predict(model_xgboost, dtrain)
roc.curve <- roc(data_train$flag_kredit_macet, data_train$pred, ci=T)
con=confusionMatrix(factor(data_train$pred>threshold), factor(data_train$flag_kredit_macet==1), positive="TRUE")
dtrain
set.seed(1234)
data_smote=data_train
data_smote$flag_kredit_macet=as.character(data_smote$flag_kredit_macet)
data_smote$flag_kredit_macet=as.factor(data_smote$flag_kredit_macet)
data_smote <- SMOTE(flag_kredit_macet ~ .,
data=data_smote,
perc.over = 200, perc.under=300)
data_smote$flag_kredit_macet=as.character(data_smote$flag_kredit_macet)
data_smote$flag_kredit_macet=as.numeric(data_smote$flag_kredit_macet)
region_smote <- model.matrix(~kode_cabang-1,data_smote)
delikuensi_smote <- model.matrix(~skor_delikuensi-1,data_smote)
data_numerik_smote=data_smote%>%select(-kode_cabang,-skor_delikuensi,-flag_kredit_macet)
data_numerik_smote=cbind(data_numerik_smote,region_smote,delikuensi_smote)
data_matrix_smote <- data.matrix(data_numerik_smote)
train_label_smote=data.matrix(data_smote%>%select_(.dots=c(vardep)))
dtrain_smote <- xgb.DMatrix(data = data_matrix_smote, label=train_label_smote )
dtrain_smote
data_matrix_smote
names(data_matrix_smote)
colnames(data_matrix_smote)
colnames(data_matrix)
data_numerik_smote=data_smote%>%select(-kode_cabang,-skor_delikuensi,-flag_kredit_macet,-pred)
data_numerik_smote=cbind(data_numerik_smote,region_smote,delikuensi_smote)
data_matrix_smote <- data.matrix(data_numerik_smote)
train_label_smote=data.matrix(data_smote%>%select_(.dots=c(vardep)))
dtrain_smote <- xgb.DMatrix(data = data_matrix_smote, label=train_label_smote )
model_xgboost_smote <- xgboost(data = dtrain_smote, # the data
nround = 100, # max number of boosting iterations
objective = "binary:logistic")  # the objective function
data_smote$pred <- predict(model_xgboost_smote, dtrain_smote)
roc.curve_smote <- roc(data_smote$flag_kredit_macet, data_smote$pred, ci=T)
con_smote=confusionMatrix(factor(data_smote$pred>threshold), factor(data_smote$flag_kredit_macet==1), positive="TRUE")
data_train$pred_smote <- predict(model_xgboost_smote, dtrain)
dtrain
dtrain_smote
data_train$pred_smote <- predict(model_xgboost_smote, new_data=dtrain)
model_xgboost_smote
predict(model_xgboost_smote, new_data=dtrain)
predict(model_xgboost_smote, dtrain)
con_smote
roc.curve_smote
roc.curve
model_xgboost_smote
con_smote$byClass
library(dplyr)
library(pROC)
library(caret)
library(xgboost)
data_train=read.csv("npl_train.csv")%>%
select(-X)
data_test=read.csv("npl_test.csv")%>%
select(-X)
summary(data_train)
summary(data_test)
var_nominal=c("kode_cabang","skor_delikuensi")
vardep="flag_kredit_macet"
data_train=data_train%>%
mutate_at(vars(one_of(var_nominal)),funs(as.character))%>%
mutate_at(vars(one_of(var_nominal)),funs(as.factor))
data_test=data_test%>%
mutate_at(vars(one_of(var_nominal)),funs(as.character))%>%
mutate_at(vars(one_of(var_nominal)),funs(as.factor))
levels(data_test$kode_cabang)=levels(data_train$kode_cabang)
levels(data_test$skor_delikuensi)=levels(data_train$skor_delikuensi)
formu=as.formula(paste(vardep,"~."))
threshold <- 0.5
data_numerik=data_train%>%
select(-kode_cabang,-skor_delikuensi,-flag_kredit_macet)
region <- model.matrix(~kode_cabang-1,data_train)
delikuensi <- model.matrix(~skor_delikuensi-1,data_train)
data_numerik=cbind(data_numerik,delikuensi,region)
data_matrix <- data.matrix(data_numerik)
train_label=data.matrix(data_train%>%select_(.dots=c(vardep)))
dtrain <- xgb.DMatrix(data = data_matrix, label=train_label )
model_xgboost <- xgboost(data = dtrain, # the data
nround = 100, # max number of boosting iterations
objective = "binary:logistic")  # the objective function
data_train$pred <- predict(model_xgboost, dtrain)
roc.curve <- roc(data_train$flag_kredit_macet, data_train$pred, ci=T)
con=confusionMatrix(factor(data_train$pred>threshold), factor(data_train$flag_kredit_macet==1), positive="TRUE")
roc.curve
con$byClass
set.seed(1234)
data_smote=data_train
data_smote$flag_kredit_macet=as.character(data_smote$flag_kredit_macet)
data_smote$flag_kredit_macet=as.factor(data_smote$flag_kredit_macet)
data_smote <- SMOTE(flag_kredit_macet ~ .,
data=data_smote,
perc.over = 200, perc.under=300)
source('E:/Sifat/finhacks2018/boluemprit/npl-20180815/smote function.R')
source('smote function.R')
data_smote=data_train %>% select(-pred)
data_smote$flag_kredit_macet=as.character(data_smote$flag_kredit_macet)
data_smote$flag_kredit_macet=as.factor(data_smote$flag_kredit_macet)
data_smote <- SMOTE(flag_kredit_macet ~ .,
data=data_smote,
perc.over = 200, perc.under=300)
data_smote$flag_kredit_macet=as.character(data_smote$flag_kredit_macet)
data_smote$flag_kredit_macet=as.numeric(data_smote$flag_kredit_macet)
region_smote <- model.matrix(~kode_cabang-1,data_smote)
delikuensi_smote <- model.matrix(~skor_delikuensi-1,data_smote)
data_numerik_smote=data_smote%>%select(-kode_cabang,-skor_delikuensi,-flag_kredit_macet)
data_numerik_smote=cbind(data_numerik_smote,region_smote,delikuensi_smote)
data_matrix_smote <- data.matrix(data_numerik_smote)
train_label_smote=data.matrix(data_smote%>%select_(.dots=c(vardep)))
dtrain_smote <- xgb.DMatrix(data = data_matrix_smote, label=train_label_smote )
model_xgboost_smote <- xgboost(data = dtrain_smote, # the data
nround = 100, # max number of boosting iterations
objective = "binary:logistic")  # the objective function
dtrain_smote
data_smote$pred <- predict(model_xgboost_smote, dtrain_smote)
roc.curve_smote <- roc(data_smote$flag_kredit_macet, data_smote$pred, ci=T)
con_smote=confusionMatrix(factor(data_smote$pred>threshold), factor(data_smote$flag_kredit_macet==1), positive="TRUE")
roc.curve_smote
roc.curve
con_smote
con_smote$byClass
con$byClass
con
data_train$pred_smote <- predict(model_xgboost_smote, dtrain)
dtrain
dtrain_smote
nrow(data_train)
model_xgboost_smote$feature_names
model_xgboost$feature_names
sort(model_xgboost$feature_names)
sort(model_xgboost$feature_names)==sort(model_xgboost_smote$feature_names)
sum(sort(model_xgboost$feature_names)!=sort(model_xgboost_smote$feature_names))
set.seed(1234)
data_smote=data_train %>% select(-pred)
data_smote$flag_kredit_macet=as.character(data_smote$flag_kredit_macet)
data_smote$flag_kredit_macet=as.factor(data_smote$flag_kredit_macet)
data_smote <- SMOTE(flag_kredit_macet ~ .,
data=data_smote,
perc.over = 200, perc.under=300)
data_smote$flag_kredit_macet=as.character(data_smote$flag_kredit_macet)
data_smote$flag_kredit_macet=as.numeric(data_smote$flag_kredit_macet)
region_smote <- model.matrix(~kode_cabang-1,data_smote)
delikuensi_smote <- model.matrix(~skor_delikuensi-1,data_smote)
data_numerik_smote=data_smote%>%select(-kode_cabang,-skor_delikuensi,-flag_kredit_macet)
data_numerik_smote=cbind(data_numerik_smote,delikuensi_smote,region_smote)
data_matrix_smote <- data.matrix(data_numerik_smote)
train_label_smote=data.matrix(data_smote%>%select_(.dots=c(vardep)))
dtrain_smote <- xgb.DMatrix(data = data_matrix_smote, label=train_label_smote )
model_xgboost_smote <- xgboost(data = dtrain_smote, # the data
nround = 100, # max number of boosting iterations
objective = "binary:logistic")  # the objective function
data_smote$pred <- predict(model_xgboost_smote, dtrain_smote)
roc.curve_smote <- roc(data_smote$flag_kredit_macet, data_smote$pred, ci=T)
con_smote=confusionMatrix(factor(data_smote$pred>threshold), factor(data_smote$flag_kredit_macet==1), positive="TRUE")
data_train$pred_smote <- predict(model_xgboost_smote, dtrain)
roc.curve_test <- roc(data_train$flag_kredit_macet, data_train$pred_smote, ci=T)
roc.curve_test
con_test=confusionMatrix(factor(data_train$pred_smote>threshold), factor(data_train$flag_kredit_macet==1), positive="TRUE")
con_test
con_test$byClass
roc.curve_test
con_test
con_test$byClass
set.seed(1234)
data_smote2=data_train %>% select(-pred,-pred_smote)
data_smote2$flag_kredit_macet=as.character(data_smote2$flag_kredit_macet)
data_smote2$flag_kredit_macet=as.factor(data_smote2$flag_kredit_macet)
data_smote2 <- SMOTE(flag_kredit_macet ~ .,
data=data_smote2,
perc.over = 300, perc.under=300)
table(data_train$flag_kredit_macet)
table(data_smote$flag_kredit_macet)
table(data_smote2$flag_kredit_macet)
data_smote2$flag_kredit_macet=as.character(data_smote2$flag_kredit_macet)
data_smote2$flag_kredit_macet=as.numeric(data_smote2$flag_kredit_macet)
region_smote2 <- model.matrix(~kode_cabang-1,data_smote2)
delikuensi_smote2 <- model.matrix(~skor_delikuensi-1,data_smote2)
data_numerik_smote2=data_smote2%>%select(-kode_cabang,-skor_delikuensi,-flag_kredit_macet)
data_numerik_smote2=cbind(data_numerik_smote2,delikuensi_smote2,region_smote2)
data_matrix_smote2 <- data.matrix(data_numerik_smote2)
train_label_smote2=data.matrix(data_smote2%>%select_(.dots=c(vardep)))
dtrain_smote2 <- xgb.DMatrix(data = data_matrix_smote2, label=train_label_smote2 )
model_xgboost_smote2 <- xgboost(data = dtrain_smote2, # the data
nround = 100, # max number of boosting iterations
objective = "binary:logistic")  # the objective function
data_smote2$pred <- predict(model_xgboost_smote2, dtrain_smote2)
roc.curve_smote2 <- roc(data_smote2$flag_kredit_macet, data_smote2$pred, ci=T)
roc.curve_smote2
roc.curve_smote
con_smote2=confusionMatrix(factor(data_smote2$pred>threshold), factor(data_smote2$flag_kredit_macet==1), positive="TRUE")
con_smote2
con_smote
data_train$pred_smote2 <- predict(model_xgboost_smote2, dtrain)
roc.curve_test2 <- roc(data_train$flag_kredit_macet, data_train$pred_smote2, ci=T)
roc.curve_test2
con_test2=confusionMatrix(factor(data_train$pred_smote2>threshold), factor(data_train$flag_kredit_macet==1), positive="TRUE")
con_test2
con_test2$byClass
roc.curve_smote
roc.curve
con_smote
con_test
con_test$byClass
con_smote$byClass
roc.curve_train_smote <- roc(data_train$flag_kredit_macet, data_train$pred_smote, ci=T)
source('E:/Sifat/finhacks2018/boluemprit/npl-20180815/npl.R')
roc.curve_train_smote
roc.curve
con_train_smote
con_train_smote$byClass
con$byClass
con
con_train_smote
data_train%>%select(flag_kredit_macet,pred,pred_smote)%>%View()
all_=xgb.plot.importance(model_xgboost)
all_=xgb.importance(colnames(dtrain),model=model_xgboost)
all_
smote=xgb.importance(colnames(dtrain),model=model_xgboost_smote)
smote
smote
all_
colnames(dtrain)
data_numerik_test=data_test%>%
select(-kode_cabang,-skor_delikuensi)
region_test <- model.matrix(~kode_cabang-1,data_test)
delikuensi_test <- model.matrix(~skor_delikuensi-1,data_test)
data_numerik_test=cbind(data_numerik_test,delikuensi_test,region_test)
data_matrix_test <- data.matrix(data_numerik_test)
dtest <- xgb.DMatrix(data = data_matrix_test )
dtest
data_test$pred <- predict(model_xgboost, dtest)
data_test$pred_smote <- predict(model_xgboost_smote, dtest)
hist(data_train$pred)
hist(data_test$pred)
?quantile
quantile(x <- rnorm(1001)) # Extremes & Quartiles by default
quantile(x,  probs = c(0.1, 0.5, 1, 2, 5, 10, 50, NA)/100)
batas_percentile=quantile(data_train, probs = seq(0.05,0.95,0.05))
batas_percentile=quantile(data_train$pred, probs = seq(0.05,0.95,0.05))
batas_percentile
batas_percentile=round(quantile(data_train$pred, probs = seq(0.05,0.95,0.05)),8)
batas_percentile
?cut
Z <- stats::rnorm(10000)
table(cut(Z, breaks = -6:6))
Z <- stats::rnorm(10000)
table(cut(Z, breaks = -6:6,right = T))
Z <- stats::rnorm(10000)
table(cut(Z, breaks = -6:6,right = F))
c(0,batas_percentile,1)
data_train$klas=cut(data_train$pred,breaks = c(0,batas_percentile,1), labels = c(1:20))
table(data_train$klas)
prob.table(table(data_train$klas))
prop.table(table(data_train$klas))
data_train%>%
summarise(klas)%>%
s
data_train%>%group_by(klas)%>% summarise(min=min(pred), max=max(pred),bad=sum(flag_kredit_macet),n= n())
batas_percentile_smote=round(quantile(data_train$pred_smote, probs = seq(0.05,0.95,0.05)),8)
data_train$klas_smote=cut(data_train$pred_smote,breaks = c(0,batas_percentile_smote,1), labels = c(1:20))
data_train%>%group_by(klas_smote)%>% summarise(min=min(pred_smote), max=max(pred_smote),bad=sum(flag_kredit_macet),n= n())
library(smbinning)
batas_percentile_smote
batas_percentile
data_test$klas=cut(data_test$pred,breaks = c(0,batas_percentile,1), labels = c(1:20))
data_test$klas_smote=cut(data_test$pred_smote,breaks = c(0,batas_percentile_smote,1), labels = c(1:20))
prop.table(table(data_test$klas))
prop.table(table(data_test$klas))*100
prop.table(table(data_test$klas_smote))*100
?smbinning.psi
smbinning.psi(df=chileancredit,y="period",x="inc")
head(chileancredit)
data_psi=data_train%>%
select(klas, klas_smote)%>%
mutate(type="train")%>%
rbind(data_test%>%
select(klas, klas_smote)%>%
mutate(type="test"))
head(data_psi)
smbinning.psi(data_psi, y="type",x="klas")
data_psi=data_train%>%
select(klas, klas_smote)%>%
mutate(type="1")%>%
rbind(data_test%>%
select(klas, klas_smote)%>%
mutate(type="2"))
smbinning.psi(data_psi, y="type",x="klas")
a=smbinning.psi(data_psi, y="type",x="klas")
a$psicnt
a$psipct
a$psimg
smbinning.psi(data_psi, y="type",x="klas_smote")
source('E:/Sifat/finhacks2018/boluemprit/npl-20180815/npl.R')
smbinning.psi(data_psi, y="type",x="klas_smote")  #PSi=0.03056048
---
title: "Predicting Credit Card Default using XGBoost"
author: "Siti Fatimah"
date: "11 September 2018"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
install.packages("svmiller")
devtools::install_github("svmiller/stevemisc")
library(stevemisc)
install.packages("rticles")
library(rmarkdown)
library(rticles)
install.packages("natbib")
install.packages("pandoc")
?rmarkdown::pandoc_available
pandoc_available()
if (pandoc_available())
cat("pandoc", as.character(pandoc_version()), "is available!\n")
if (pandoc_available("1.12.3"))
cat("required version of pandoc is available!\n")
install.packages("tufte")
library(tufte)
?tufte_handout
install.packages("knitr")
install.packages("knitr")
rmarkdown::html_vignette
library(devtools)
install_git("svmiller/svm-r-markdown-templates")
rmarkdown::pandoc_available
rmarkdown::pandoc_available()
library(yaml)
?yaml.load
getwd()
nrow(data_train)
names(data_train)
nrow(data_test)
con
con_test
con_train_smote
source('E:/Sifat/finhacks2018/boluemprit/npl-20180815/npl.R')
con_train_smote
names(data_train)
table(data_train$flag_kredit_macet)
prop.table(table(data_train$flag_kredit_macet))
prop.table(table(data_train$flag_kredit_macet))*100
library(dplyr)
names(data_train)
summary(data_train[,c(1:23)])
a=c(1,2,3,4,NA)
summary(a)
library(smbinning)
iv_table
iv_table()
iv_table=smbinning.sumiv(data_train, y="flag_kredit_macet")
iv_table
iv_table=smbinning.sumiv(data_train[,c(1:23)], y="flag_kredit_macet")
iv_table
?smbinning
?xgb.DMatrix
table(data_smote$flag_kredit_macet)
100*prop.table(table(data_smote$flag_kredit_macet))
names(data_smote)
summary(data_smote[,c(1:23)])
all_
all_
smote
roc.curve
roc.curve$percent
roc.curve$auc
con
con$table
con$byClass
con$overall
con$overall[1]
table_akurasi=data.frame(data=c("train", "smote", "train"),
model=c("all","smote","smote"),
auc=c(roc.curve$auc, roc.curve_smote$auc,roc.curve_train_smote$auc),
accuracy=c(con$overall[1],con_smote$overall[1]),con_train_smote$overall[1])
table_akurasi=data.frame(data=c("train", "smote", "train"),
model=c("all","smote","smote"),
auc=c(as.numeric(roc.curve$auc), as.numeric(roc.curve_smote$auc),as.numeric(roc.curve_train_smote$auc)),
accuracy=c(con$overall[1],con_smote$overall[1],con_train_smote$overall[1]))
table_akurasi
con$byClass
con$byClass[6]
con_test
table_akurasi=data.frame(data=c("train", "smote", "train"),
model=c("all","smote","smote"),
auc=c(as.numeric(roc.curve$auc), as.numeric(roc.curve_smote$auc),as.numeric(roc.curve_train_smote$auc)),
accuracy=c(con$overall[1],con_smote$overall[1],con_train_smote$overall[1]),
recall=c(con$byClass[6],con_smote$byClass[6],con_train_smote$byClass[6]))
table_akurasi
table_akurasi=data.frame(data=c("train", "smote", "train"),
model=c("xgboost","smote-xgboost","smote-xgboost"),
auc=c(as.numeric(roc.curve$auc), as.numeric(roc.curve_smote$auc),as.numeric(roc.curve_train_smote$auc)),
accuracy=c(con$overall[1],con_smote$overall[1],con_train_smote$overall[1]),
recall=c(con$byClass[6],con_smote$byClass[6],con_train_smote$byClass[6]))
table_akurasi
plot(all_)
?xgb.plot.importance
xgb.plot.importance(all_)
xgb.plot.importance(smote)
psi_all=smbinning.psi(data_psi, y="type",x="klas")        #PSI=0.07432464
psi_smote=smbinning.psi(data_psi, y="type",x="klas_smote")  #PSi=0.03056048
psi_all
psi_all$psimg
psi_all$psimg[21,2]
psi_table=data.frame(model=c("xgboost","smote-xgboost"),
PSI=c(psi_all$psimg[21,2],psi_smote$psimg[21,2]))
psi_table
library(knitr)
